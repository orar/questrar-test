'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT-style license found in the
                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree. *
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * @providesModule toHaveStateAssertion
                                                                                                                                                                                                                                                                               * 
                                                                                                                                                                                                                                                                               */

var _name = require('../utils/name');

var _name2 = _interopRequireDefault(_name);

var _reduceAssertionObject = require('../utils/reduceAssertionObject');

var _reduceAssertionObject2 = _interopRequireDefault(_reduceAssertionObject);

var _stringify3 = require('../utils/stringify');

var _stringify4 = _interopRequireDefault(_stringify3);

var _single = require('../utils/single');

var _single2 = _interopRequireDefault(_single);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function toHaveState(enzymeWrapper, stateKey, stateValue) {
  var state = enzymeWrapper.state();
  var wrapperName = (0, _name2.default)(enzymeWrapper);

  // The API allows to check if a component has a prop in general by dropping the third
  // argument.
  if (stateValue === undefined && arguments.length === 2 && (typeof stateKey === 'undefined' ? 'undefined' : _typeof(stateKey)) !== 'object' && Array.isArray(stateKey) === false) {
    return {
      pass: state.hasOwnProperty(stateKey),
      message: 'Expected <' + wrapperName + '> to have any value for the prop "' + stateKey + '"',
      negatedMessage: 'Expected <' + wrapperName + '> not to receive the prop "' + stateKey + '"',
      contextualInformation: {
        actual: 'Actual props: ' + (0, _stringify4.default)(_defineProperty({}, stateKey, state[stateKey])),
        expected: 'Expected props: ' + (0, _stringify4.default)(_defineProperty({}, stateKey, stateValue))
      }
    };
  }

  var results = _reduceAssertionObject2.default.call(this, state, stateKey, stateValue);
  var unmatchedKeys = results.unmatchedKeys.join(', ');
  var contextualInformation = {
    actual: 'Actual state: ' + (0, _stringify4.default)(results.actual),
    expected: 'Expected state: ' + (0, _stringify4.default)(results.expected)
  };

  // error if some state doesn't exist
  if (results.missingKeys.length) {
    var missingKeys = results.missingKeys.join(', ');
    return {
      pass: false,
      message: 'Expected <' + wrapperName + '> component state to have keys of "' + missingKeys + '"',
      negatedMessage: 'Expected <' + wrapperName + '> component state to not contain a key of "' + missingKeys + '".',
      contextualInformation: contextualInformation
    };
  }

  return {
    pass: results.pass,
    message: 'Expected <' + wrapperName + '> component state values to match for keys "' + unmatchedKeys + '" but they didn\'t.',
    negatedMessage: 'Expected <' + wrapperName + '> component state values to be different for keys "' + unmatchedKeys + '" but they didn\'t.',
    contextualInformation: contextualInformation
  };
}

exports.default = (0, _single2.default)(toHaveState);
module.exports = exports['default'];