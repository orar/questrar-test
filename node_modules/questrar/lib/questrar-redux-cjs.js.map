{"version":3,"file":"questrar-redux-cjs.js","sources":["src/module/common.js","src/redux/common.js","node_modules/invariant/invariant.js","src/module/helper.js","src/redux/createRequest.js","src/redux/createStateProvider.js","src/redux/RequestReducer.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport type { RequestState } from \"../index\";\n\n\n//status flags\nexport const PENDING = 'pending';\nexport const SUCCESS = 'success';\nexport const FAILED = 'failed';\n\n//action flags\nexport const REPLACE = 'replace';\nexport const REMOVE = 'remove';\nexport const CLEAN = 'clean';\nexport const DIRTY = 'clean';\n\n\n//Initial request state\nexport const initialRequest: RequestState = {\n  pending: false,\n  success: false,\n  failed: false,\n  successCount: 0,\n  failureCount: 0,\n  message: '',\n  clean: true,\n};\n","// @flow\n\n//Default redux store path to request state object\nexport const REDUX_STATE_PATH = '';\n\n//Default redux reducer id / redux store object id\nexport const REQUEST_ACTION_TYPE = '__QUESTRAR_REQUEST_';\n\n\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar NODE_ENV = process.env.NODE_ENV;\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","// @flow\nimport invariant from 'invariant';\nimport type {RequestState} from \"../index\";\n\n/**\n * Extract list values of keys from a base object.\n * Use `getValue` 3rd param to retrieve/transform value based on key and base object\n *\n * ```\n * const baseObj = { k: 0, l: 3, m: { n: 'stringVal', o: true } }\n * const values = valuesOfKeys(['k', 'l', 'm'], baseObj);\n * console.log(values) // [0, 3, { n: 'string', o: true }]\n * ```\n * @param keys a key as string or list of keys\n * @param obj\n * @param getValue Retrieve or transform the resulting value if provided as a function\n * @returns {*} Returns an empty array if no keys had a match in the base object\n */\nexport const arrayValuesOfKeys = (obj: Object, keys: Array<string | number>, getValue?: (key: any, obj: Object) => any) => {\n  invariant(nonEmpty(obj), 'No object has been provided for keys extraction');\n  invariant(nonEmpty(keys), 'There are no keys provided for values extraction');\n\n  if(typeof keys === 'string') {\n\n    if(isFunc(getValue)){\n      return [getValue(keys, obj)];\n    } else if(Object.hasOwnProperty.call(obj, keys)){\n      return [obj[keys]];\n    }\n    return [];\n  }\n\n  const result = [];\n  for(let i = 0; i < keys.length; i ++ ){\n    if(isFunc(getValue)){\n      const value =  getValue(keys[i], obj);\n      result.push(value);\n    } else if(Object.hasOwnProperty.call(obj, keys[i])){\n      result.push(obj[keys[i]]);\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Reset a request flags to initial state.\n * Setting pending, success and failed to false\n *\n * @param req\n * @returns {Request}\n */\nexport const resetRequestFlags = (req: RequestState) => {\n  const r = req;\n  r.pending = false;\n  r.success = false;\n  r.failed = false;\n  if(r.message) {\n    delete r.message\n  }\n  return r;\n};\n\n\n/**\n * Creates a random string of length less than 15 characters with [a - h]\n * @param length\n * @returns {string}\n */\nexport function randomId () {\n  const rand = Math.random();\n  return rand.toString().split('.')[1];\n}\n\n\n/**\n * Checks if arg is a function\n *\n * @param func\n * @returns {boolean}\n */\nexport function isFunc (func: any):%checks {\n  return typeof func === \"function\";\n}\n\n/**\n * Checks if arg is an object and not null\n * @param obj\n * @returns {any|boolean}\n */\nexport function isObj (obj: any):%checks {\n  return nonEmpty(obj) && obj.constructor == Object\n}\n\n\n/**\n * Checks if arg is an object and not null\n * @param num\n * @returns {any|boolean}\n */\nexport function isNumber (num: any):%checks {\n  return typeof num === \"number\";\n}\n\n/**\n * Assert if value is not null or not undefined\n *\n * @param value\n * @returns {boolean}\n */\nexport function nonEmpty(value: any):%checks {\n  return typeof value !== 'undefined' && value !== null\n}\n\n\nexport function isEmptyObj(value: any) {\n  if(!nonEmpty(value)) return false;\n\n  for (let key in value) {\n    if (Object.hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n","// @flow\nimport type {RequestState} from \"../index\";\nimport {SUCCESS, FAILED, PENDING, REMOVE, CLEAN, DIRTY} from \"../module/common\";\nimport { REQUEST_ACTION_TYPE } from './common';\nimport {isNumber, nonEmpty, randomId} from \"../module/helper\";\n\n\n/**\n * Configuration type for request action\n */\nexport type RequestActionOptions = {\n  modifier?: (payload: any) => any,\n  autoRemove?: boolean,\n\n  autoRemoveOnSuccess?: boolean,\n  autoRemoveOnFailure?: boolean,\n}\n\nexport type RequestOptions = {\n  autoRemove: boolean,\n  inject: (r: RequestState) => Object,\n}\n\n\n/**\n * Creates a redux requestState action to update request state in redux store\n *\n * @param id\n * @param options\n * @returns {function(Object=, string=, RequestOptions=)}\n */\nexport function createRequest (id?: string | number, options?: RequestActionOptions) {\n  const reduxActionType = REQUEST_ACTION_TYPE;\n\n  const isStatic = nonEmpty(id) && (typeof id === 'string' || isNumber(id));\n  const hasOptions = nonEmpty(options);\n\n  const autoRemove = hasOptions && options.autoRemove;\n  const autoRemoveOnSuccess = hasOptions && options.autoRemoveOnSuccess;\n  const autoRemoveOnFailure = hasOptions && options.autoRemoveOnFailure;\n\n  const requestId = isStatic ? id : randomId();\n\n\n  /**\n   * Creates an action to update a request in redux store\n   * @param rId Request id\n   * @param status Update status of request\n   * @param message Optional message for current update\n   * @returns {{type: string, id: (string|number), status: string}}\n   */\n  const initAction = (rId: string | number, status: string, message?: any) => {\n    const _action = { type: reduxActionType, id: rId, status };\n    if(nonEmpty(message)){\n      _action.message = message\n    }\n    return _action;\n  };\n\n\n  /**\n   * Creates a pending request action\n   * @param message Optional message for update pending\n   * @returns {{type: string, id: (string|number), status: string}}\n   */\n  const pending = ( message?: any) => {\n    return initAction(requestId, PENDING, message);\n  };\n\n\n  /**\n   * Creates a request successful action\n   * @param message Optional message for update\n   * @param remove Removes request on close success\n   * @returns {{type: string, id: (string|number), status: string} & {autoRemove: boolean, autoRemoveOnSuccess: boolean}}\n   */\n  const success = ( message?: any, remove?: boolean) => {\n    const action = initAction(requestId, SUCCESS, message);\n    if(nonEmpty(remove)){\n      action.autoRemoveOnSuccess = remove\n    } else {\n      action.autoRemoveOnSuccess = autoRemoveOnFailure\n    }\n    return Object.assign(action, { autoRemove, autoRemoveOnSuccess })\n  };\n\n  /**\n   *\n   * Creates a request failed action\n   * @param message Optional message for update\n   * @param remove Removes request on close failure\n   * @returns {{type: string, id: (string|number), status: string} & {autoRemove: boolean}}\n   */\n  const failed = ( message?: any, remove?: boolean) => {\n    const action = initAction(requestId, FAILED, message);\n    if(nonEmpty(remove)){\n      action.autoRemoveOnFailure = remove\n    } else {\n      action.autoRemoveOnFailure = autoRemoveOnFailure\n    }\n    return Object.assign(action, { autoRemove })\n  };\n\n  /**\n   * Creates action to set request as clean\n   * @returns {{type: string, id: *, status: *}}\n   */\n  const clean = () => {\n    return initAction(requestId, CLEAN);\n  };\n\n  /**\n   * Creates action to set request as dirty (clean === false)\n   * @returns {{type: string, id: *, status: *}}\n   */\n  const dirty = () => {\n    return initAction(requestId, DIRTY);\n  };\n\n  /**\n   * Creates an action to remove a specific request state\n   * @returns {{type: string, id: (string|number), status: string}}\n   */\n  const remove = () => {\n    return initAction(requestId, REMOVE);\n  };\n\n  /**\n   * Action binder function\n   * @returns {*}\n   */\n  function actionCreator () {\n    return requestId;\n  }\n\n  actionCreator.toString = () => {\n    return requestId;\n  };\n\n  actionCreator.id = requestId;\n\n  actionCreator.pending = pending;\n  actionCreator.success = success;\n  actionCreator.failed = failed;\n\n  actionCreator.clean = clean;\n  actionCreator.dirty = dirty;\n\n  actionCreator.remove = remove;\n\n  return actionCreator;\n}\n\n\n\nexport default createRequest;\n","// @flow\nimport type { Store }  from 'redux';\nimport {FAILED, PENDING, REMOVE, SUCCESS} from \"../module/common\";\nimport type {ProviderRequestState} from \"../index\";\nimport { REDUX_STATE_PATH, REQUEST_ACTION_TYPE } from './common';\nimport { REPLACE } from \"../module/common\";\nimport createRequest from \"./createRequest\";\nimport {nonEmpty, isFunc} from \"../module/helper\";\n\n\n/**\n * Create a redux to questrar request state mapper\n * It uses replace state to sync from provider to redux and back\n *\n * if path is more than one level deep in the store state, path should be delimited by a dot (.)\n * e.g. 'app.operation.ticket' === { app: { operation: { ticket: { requestState }}}}\n *\n * @param store The redux store\n * @param path The store path of request state\n * @returns {{getState: getState, putState: putState}}\n */\nexport default function createStateProvider (store: Store, path?: string) {\n\n  const s = store;\n\n  /**\n   *  Request state identity\n   *  Since no two symbol created (Symbol()) are not equal\n   *  every time an update is made to store, a new symbol should be created\n   *  On store state change, symbol realizes change in request state object forcing update to context provider\n   */\n  let id: Symbol;\n\n  /**\n   * Unsubscribe function\n   */\n  let unsubscribe: () => void;\n\n  /**\n   * Redux store absolute path to request state\n   * i.e. user preferred state path + reducer id\n   *\n   * @type {string}\n   * @private\n   */\n  const _path = (path || REDUX_STATE_PATH) + '.' + REQUEST_ACTION_TYPE;\n\n\n  /**\n   * Gets the redux request state current\n   * @returns {*}\n   */\n  function getRawState(){\n    const state = s.getState();\n    const paths = _path.split('.');\n    let rState = state;\n    for(let i = 0; i < paths.length; i++){\n      if(paths[i] && Object.hasOwnProperty.call(rState, paths[i])){\n        rState = state[paths[i]]\n      }\n    }\n    return rState;\n  }\n\n  /**\n   * Get state data\n   * @returns {*}\n   */\n  function getState(){\n    const state = getRawState();\n    if(nonEmpty(state) && nonEmpty(state.data) ){\n      return state.data;\n    }\n    return {};\n  }\n\n  /**\n   * Replace the entire request state into redux\n   * CAVEAT: Prone to corrupt request state\n   * TODO: dispatch requestState specific update\n   *\n   * @param state\n   */\n  function putState(state: ProviderRequestState){\n    s.dispatch({ type: REPLACE, payload: state });\n  }\n\n\n  /**\n   * Run update to the Request provider\n   * @param update\n   * @returns {Function}\n   * @private\n   */\n  function runUpdate(update: (shouldUpdate: boolean) => any) {\n    return function () {\n      const _s = getRawState();\n      if (Object.hasOwnProperty.call(_s, 'id')) {\n        if (_s.id !== id) { //update if state id has changed since the last update\n          id = _s.id;\n          update(true)\n        }\n      }\n    }\n  }\n\n  /**\n   * Watches the request state and forces update of RequestProvider if there's been a change.\n   *\n   * CAVEAT: Calls update with true on any little update in any store state\n   * TODO: Track changes only on requestState in store\n   *\n   * @param update\n   */\n  function observe(update: (shouldUpdate: boolean) => any){\n    unsubscribe = store.subscribe(runUpdate(update));\n  }\n\n\n  /**\n   * Releases resources attached to store\n   */\n  function release() {\n   if(isFunc(unsubscribe)) {\n     unsubscribe()\n   }\n  }\n\n  /**\n   * Dispatch request state specific updates to redux store\n   * @param action\n   */\n  function updateRequest(action: Object) {\n    const req = createRequest(action.id, action);\n    let _action;\n    switch (action.status) {\n      case PENDING:\n        _action = req.pending(action.message);\n        break;\n      case FAILED:\n        _action = req.failed(action.message);\n        break;\n      case SUCCESS:\n        _action = req.success(action.message);\n        break;\n      case REMOVE:\n        _action = req.remove();\n        break;\n      default:\n        break;\n    }\n    if(nonEmpty(_action)){\n      s.dispatch(_action)\n    }\n  }\n\n\n  return {\n    getState, putState, updateRequest, observe, release, path: _path\n  };\n\n}\n","// @flow\nimport {PENDING, SUCCESS, FAILED, REPLACE, CLEAN, DIRTY, initialRequest, REMOVE} from \"../module/common\";\nimport { REQUEST_ACTION_TYPE } from './common';\nimport { nonEmpty, resetRequestFlags as resetFlags} from \"../module/helper\";\nimport invariant from 'invariant';\nimport type {RequestState, ReduxRequestState, ProviderRequestState} from \"../index\";\n\n\n\n/**\n * Sets remove flags on request.\n * Removes control removal of requestState on close of RequestComponent feature `onCloseError` or `onCloseSuccess`\n * @param state\n * @param action\n * @returns {*}\n */\nexport function setRemoves(state: Object, action: Object) {\n  const s = state;\n\n  if (action.autoRemove) {\n    s.autoRemove = true\n  }\n  if(action.autoRemoveOnSuccess){\n    s.removeOnSuccess = true;\n    if(s.autoRemove) {\n      delete s['autoRemove'];\n    }\n    return s;\n  }\n\n  if(action.autoRemoveOnFailure){\n    s.removeOnFail = true;\n    if(s.autoRemove) {\n      delete s['autoRemove'];\n    }\n    return s;\n  }\n\n  return s;\n}\n\n\n\n/**\n * Get requestState from state by request id\n * @param state\n * @param id\n * @returns {*}\n */\nexport function getState(state: ProviderRequestState, id: string | number) {\n  if (Object.hasOwnProperty.call(state, id)) {\n    return Object.assign({}, state[id]);\n  }\n  return initialRequest;\n}\n\n\n/**\n * Set request state message if provided as part of action\n * @param state\n * @param action\n */\nexport function setMessage(state: RequestState, action: Object) {\n  if(action.message){\n    state.message = action.message;\n  }\n}\n\n/**\n * Updates a request to pending\n *\n * @returns {{} & RequestState}\n */\nexport function handleRequestPending (state: ReduxRequestState, action: Object): ReduxRequestState {\n  invariant(nonEmpty(action.id), 'request action missing id field');\n\n  const id = action.id;\n  const stateId = Symbol(id);\n\n  const nextReq = resetFlags(getState(state.data, id));\n  nextReq.id = id;\n  nextReq.pending = true;\n  nextReq.clean = true;\n  setMessage(nextReq, action);\n\n  const data = Object.assign({}, state.data, { [id]: nextReq });\n  return { id: stateId, data };\n}\n\n/**\n * Updates a request to clean state\n *\n * @returns {{} & RequestState}\n */\nexport function handleRequestClean (state: ReduxRequestState, action: Object): ReduxRequestState {\n  invariant(nonEmpty(action.id), 'request action missing id field');\n\n  const id = action.id;\n  const stateId = Symbol(id);\n\n  const nextReq = resetFlags(getState(state.data, id));\n  nextReq.id = id;\n  nextReq.clean = true;\n\n  const data = Object.assign({}, state.data, { [id]: nextReq });\n  return { id: stateId, data };\n}\n\n/**\n * Updates a request to dirty state\n *\n * @returns {{} & RequestState}\n */\nexport function handleRequestDirty (state: ReduxRequestState, action: Object): ReduxRequestState {\n  invariant(nonEmpty(action.id), 'request action missing id field');\n\n  const id = action.id;\n  const stateId = Symbol(id);\n\n  const nextReq = resetFlags(getState(state.data, id));\n  nextReq.id = id;\n  nextReq.clean = false;\n\n  const data = Object.assign({}, state.data, { [id]: nextReq });\n  return { id: stateId, data };\n}\n\n\n\n/**\n * Updates a request state to failed\n * @params state, action\n * @returns {{} & RequestState}\n */\nexport function handleRequestFailed (state: ReduxRequestState, action: Object){\n  invariant(nonEmpty(action.id), 'request state action missing id field');\n\n  const id = action.id;\n  const stateId = Symbol(id);\n\n\n  const nextReq = resetFlags(getState(state.data, id));\n  nextReq.id = id;\n  nextReq.failed = true;\n  nextReq.failureCount += 1;\n  setMessage(nextReq, action);\n  setRemoves(nextReq, action);\n\n  const data = Object.assign({}, state.data, { [id]: nextReq });\n  return { id: stateId, data };\n}\n\n/**\n * Updates a request state to success.\n * Autodeletes a request if set to true\n *\n * @params state, action\n * @returns {{} & RequestState}\n */\nexport function handleRequestSuccess (state: ReduxRequestState, action: Object): ReduxRequestState {\n  invariant(nonEmpty(action.id), 'request state action missing id field');\n\n  const id = action.id;\n  const stateId = Symbol(id);\n\n  const nextReq = resetFlags(getState(state, id));\n  nextReq.id = id;\n  nextReq.success = true;\n  nextReq.successCount += 1;\n  setMessage(nextReq, action);\n  setRemoves(nextReq, action);\n\n  const data = Object.assign({}, state.data, { [id]: nextReq });\n  return { id: stateId, data };\n}\n\n\n/**\n * Remove request state from redux\n * @param state\n * @param action\n * @returns {*}\n */\nexport function removeRequestState (state: ReduxRequestState, action: Object): ReduxRequestState {\n  invariant(nonEmpty(action.id), 'request action missing id field');\n\n  const stateId = Symbol();\n  const id = action.id;\n\n  if (Object.hasOwnProperty.call(state.data, id)) {\n    const data = Object.assign({}, state.data);\n    delete data[id];\n    return { id: stateId, data };\n  }\n  return Object.assign({}, state);\n}\n\n\n/**\n * Replaces the whole request state with a new state\n *\n * @param state\n * @param action\n * @returns {*}\n */\nexport const replaceState = (state: ProviderRequestState, action: Object) => {\n  const stateId = Symbol();\n\n  return Object.assign({}, { data: action.state, id: stateId });\n};\n\n\n/**\n * Request state reducer for redux\n * @param state Initial state\n * @param action redux action dispatched\n * @returns {*} Final state\n */\nexport function rootReducer(state: ReduxRequestState, action: Object) {\n  const _state = Object.assign({ data: {} }, state);\n  switch (action.status){\n    case PENDING:\n      return handleRequestPending(_state, action);\n\n    case SUCCESS:\n      return handleRequestSuccess(_state, action);\n\n    case FAILED:\n      return handleRequestFailed(_state, action);\n\n    case CLEAN:\n      return handleRequestClean(_state, action);\n\n    case DIRTY:\n      return handleRequestDirty(_state, action);\n\n    case REPLACE:\n      return replaceState(_state, action);\n\n    case REMOVE:\n      return removeRequestState(_state, action);\n\n    default:{\n      return _state;\n    }\n  }\n}\n\nexport default { [REQUEST_ACTION_TYPE]: rootReducer };\n"],"names":["PENDING","SUCCESS","FAILED","REPLACE","REMOVE","CLEAN","DIRTY","initialRequest","REDUX_STATE_PATH","REQUEST_ACTION_TYPE","resetRequestFlags","req","r","pending","success","failed","message","randomId","rand","Math","random","toString","split","isFunc","func","isNumber","num","nonEmpty","value","createRequest","id","options","reduxActionType","isStatic","hasOptions","autoRemove","autoRemoveOnSuccess","autoRemoveOnFailure","requestId","initAction","rId","status","_action","type","remove","action","Object","assign","clean","dirty","actionCreator","createStateProvider","store","path","s","unsubscribe","_path","getRawState","state","getState","paths","rState","i","length","hasOwnProperty","call","data","putState","dispatch","payload","runUpdate","update","_s","observe","subscribe","release","updateRequest","setRemoves","removeOnSuccess","removeOnFail","setMessage","handleRequestPending","stateId","Symbol","nextReq","resetFlags","handleRequestClean","handleRequestDirty","handleRequestFailed","failureCount","handleRequestSuccess","successCount","removeRequestState","replaceState","rootReducer","_state"],"mappings":"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"}